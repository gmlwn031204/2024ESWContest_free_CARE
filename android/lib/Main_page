import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'Impact_page.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart';

class Main_page extends StatefulWidget {
  final String name;
  final String relation;
  final String phone;

  const Main_page({
    super.key,
    required this.name,
    required this.relation,
    required this.phone,
  });

  @override
  State<Main_page> createState() => _Main_pageState();
}

class _Main_pageState extends State<Main_page> {
  bool _navigated = false;
  BluetoothDevice? device;
  StreamSubscription<List<int>>? notificationSubscription;

  @override
  void initState() {
    super.initState();
    _connectToBLE();
  }

  @override
  void dispose() {
    notificationSubscription?.cancel();
    device?.disconnect();
    super.dispose();
  }

  // BLE 연결 함수
  void _connectToBLE() async {
    try {
      // BLE 스캔 시작
      await FlutterBluePlus.startScan(timeout: const Duration(seconds: 4));
      
      // 스캔 결과 리스닝
      FlutterBluePlus.scanResults.listen((results) async {
        for (ScanResult r in results) {
          print('${r.device.name} found! rssi: ${r.rssi}');
          
          // Arduino Nano 33 BLE 찾기 (이름이 "Arduino" 또는 특정 이름으로 시작하는 기기)
          if (r.device.name.contains('Arduino') && !_navigated) {
            print('Found Arduino: ${r.device.name}');
            
            // 스캔 중지
            await FlutterBluePlus.stopScan();
            
            // 연결
            device = r.device;
            await device!.connect();
            print('Connected to ${r.device.name}');

            // 서비스 탐색
            List<BluetoothService> services = await device!.discoverServices();
            for (BluetoothService service in services) {
              for (BluetoothCharacteristic characteristic in service.characteristics) {

                if (characteristic.properties.notify) {

                  await characteristic.setNotifyValue(true);
                  
                  // 알림 리스닝
                  notificationSubscription = characteristic.lastValueStream.listen((value) {
                    if (value.isNotEmpty) {
                      String message = String.fromCharCodes(value);
                      print('Received: $message');
                      
                      // 충돌 감지 메시지를 받으면 Impact_page로 이동
                      if (message.trim() == "CRASH_ALERT" && !_navigated && mounted) {
                        _navigated = true;
                        Navigator.pushReplacement(
                          context,
                          MaterialPageRoute(
                            builder: (context) => Impact_page(
                              name: widget.name,
                              relation: widget.relation,
                              phone: widget.phone,
                            ),
                          ),
                        );
                      }
                    }
                  });
                }
              }
            }
          }
        }
      });
      
    } catch (e) {
      print('Error connecting to BLE device: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      body: Center(
        child: Padding(
          padding: const EdgeInsets.symmetric(horizontal: 24.0),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.start,
            crossAxisAlignment: CrossAxisAlignment.center,
            children: [
              const SizedBox(height: 145),
              Text(
                'SafeRide',
                style: TextStyle(
                  fontSize: 73,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 1.5,
                  color: Colors.black,
                  shadows: [
                    Shadow(
                      blurRadius: 8.0,
                      color: Colors.black26,
                      offset: Offset(0, 4),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 48),
              Align(
                alignment: Alignment.centerLeft,
                child: Text('보호자 이름', style: TextStyle(fontSize: 14, color: Colors.black87)),
              ),
              const SizedBox(height: 8),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  widget.name,
                  style: const TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 20),
              Align(
                alignment: Alignment.centerLeft,
                child: Text('관계', style: TextStyle(fontSize: 14, color: Colors.black87)),
              ),
              const SizedBox(height: 8),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  widget.relation,
                  style: const TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(height: 20),
              Align(
                alignment: Alignment.centerLeft,
                child: Text('보호자 번호', style: TextStyle(fontSize: 14, color: Colors.black87)),
              ),
              const SizedBox(height: 8),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
                decoration: BoxDecoration(
                  color: Colors.grey[300],
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Text(
                  widget.phone,
                  style: const TextStyle(
                    fontSize: 28,
                    fontWeight: FontWeight.bold,
                    color: Colors.black,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}

